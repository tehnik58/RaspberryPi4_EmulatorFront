using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

public class RaspberryPiEmulator : MonoBehaviour
{
    private WebSocketManager webSocketManager;
    private ConsoleOutput consoleOutput;

    [SerializeField] private string initialCode = @"import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
GPIO.setup(18, GPIO.OUT)

try:
    for i in range(10):
        GPIO.output(18, GPIO.HIGH)
        time.sleep(0.5)
        GPIO.output(18, GPIO.LOW)
        time.sleep(0.5)
finally:
    GPIO.cleanup()";

    private void Start()
    {
        InitializeComponents();
        _ = ConnectToServerAsync(); // discard –¥–ª—è async void
    }

    private void InitializeComponents()
    {
        // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º WebSocketManager
        webSocketManager = GetComponent<WebSocketManager>();
        if (webSocketManager == null)
        {
            webSocketManager = gameObject.AddComponent<WebSocketManager>();
            Debug.Log("WebSocketManager component added");
        }

        // –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        consoleOutput = FindObjectOfType<ConsoleOutput>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
        if (consoleOutput == null)
            Debug.LogError("ConsoleOutput not found!");
        else
            Debug.Log("ConsoleOutput found");

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        webSocketManager.OnMessageReceived += HandleWebSocketMessage;
        webSocketManager.OnConnected += OnConnected;
        webSocketManager.OnDisconnected += OnDisconnected;
        webSocketManager.OnError += OnError;

        Debug.Log("All components initialized successfully");
    }

    public async Task ConnectToServerAsync()
    {
        Debug.Log("Connecting to server...");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        bool serverAvailable = await webSocketManager.CheckServerAvailability();
        
        if (!serverAvailable)
        {
            Debug.LogError("Server is not available");
            OnError("–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä–Ω—É—é —á–∞—Å—Ç—å –Ω–∞ –ø–æ—Ä—Ç—É 8000");
            return;
        }

        Debug.Log("Server is available, attempting connection...");
        await webSocketManager.ConnectAsync();
    }

    public void ExecuteCode(string code)
    {
        if (string.IsNullOrEmpty(code))
        {
            Debug.Log("Empty code");
            if (consoleOutput != null)
            {
                consoleOutput.AddMessage("–û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π –∫–æ–¥", ConsoleOutput.MessageType.Error);
            }
            return;
        }

        if (webSocketManager == null || !webSocketManager.IsConnected)
        {
            Debug.Log("WebSocket not connected");
            if (consoleOutput != null)
            {
                consoleOutput.AddMessage("–û—à–∏–±–∫–∞: –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", ConsoleOutput.MessageType.Error);
            }
            return;
        }

        Debug.Log($"Executing code length: {code.Length} characters");
    
        try
        {
            // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON
            string jsonMessage = $"{{\"type\":\"execute\",\"code\":{EscapeJsonString(code)}}}";
        
            Debug.Log($"Sending JSON: {jsonMessage}");
            webSocketManager.SendMessage(jsonMessage);
        
            if (consoleOutput != null)
            {
                consoleOutput.AddMessage("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", ConsoleOutput.MessageType.Success);
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"Send error: {ex.Message}");
            if (consoleOutput != null)
            {
                consoleOutput.AddMessage($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {ex.Message}", ConsoleOutput.MessageType.Error);
            }
        }
    }

// –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ JSON
    private string EscapeJsonString(string input)
    {
        if (string.IsNullOrEmpty(input))
            return "\"\"";

        //—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã JSON
        string escaped = input
            .Replace("\\", "\\\\")  // –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à
            .Replace("\"", "\\\"")  // –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            .Replace("\n", "\\n")   // –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            .Replace("\r", "\\r")   // –≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
            .Replace("\t", "\\t");  // —Ç–∞–±—É–ª—è—Ü–∏—è

        return $"\"{escaped}\"";
    }
    private void DetectGPIOEvents(string output)
    {
        Match outputMatch = Regex.Match(output, @"GPIO\s+(\d+)\s+output:\s+(True|False)", RegexOptions.IgnoreCase);
        if (outputMatch.Success)
        {
            int pin = int.Parse(outputMatch.Groups[1].Value);
            bool state = outputMatch.Groups[2].Value.ToLower() == "true";
            EventManager.Instance.Publish(new GPIOStateChangedEvent(pin, state));
        }
    }
    
    private void HandleWebSocketMessage(string message)
    {
        Debug.Log($"üì® Received: {message}");
        if (consoleOutput != null)
        {
            consoleOutput.AddMessage(message, ConsoleOutput.MessageType.Info);
        }
        DetectGPIOEvents(message);
        EventManager.Instance.Publish(new ConsoleOutput.RawMessageEvent(message));
    }

    private void OnConnected()
    {
        consoleOutput?.AddMessage("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É", ConsoleOutput.MessageType.Success);
        EventManager.Instance.Publish(new ConnectionStatusEvent(true));
    }

    private void OnDisconnected()
    {
        consoleOutput?.AddMessage("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ", ConsoleOutput.MessageType.Error);
        EventManager.Instance.Publish(new ConnectionStatusEvent(false));
    }

    private void OnError(string error)
    {
        Debug.LogError($"Error: {error}");
        if (consoleOutput != null)
        {
            consoleOutput.AddMessage($"‚ö† –û—à–∏–±–∫–∞: {error}", ConsoleOutput.MessageType.Error);
        }
    }

    public string GetInitialCode()
    {
        return initialCode;
    }

    void OnDestroy()
    {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        if (webSocketManager != null)
        {
            webSocketManager.OnMessageReceived -= HandleWebSocketMessage;
            webSocketManager.OnConnected -= OnConnected;
            webSocketManager.OnDisconnected -= OnDisconnected;
            webSocketManager.OnError -= OnError;
        }
    }
}